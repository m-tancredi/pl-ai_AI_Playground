# Rimuovi 'version: '3.8'' se usi docker compose V2+

networks:
  pl-ai-network:
    driver: bridge

volumes:
  # Database Volumes
  postgres_data:           # Auth Service DB
  # RIMOSSO: regression_db_data:
  image_generator_db_data: # Image Generator Service DB
  resource_db_data:        # Resource Manager Service DB
  # Media Volumes
  # RIMOSSO: regression_media_data:
  image_generator_media:   # Image Generator Service Media
  resource_media_data:     # Resource Manager Service Media
  # Broker Volume
  rabbitmq_data:

secrets:
  openai_api_key_secret:
    file: ./.secrets/openai_api_key.txt
  stability_api_key_secret:
    file: ./.secrets/stability_api_key.txt

services:

  # --- Databases ---
  auth_db:
    image: postgres:15-alpine
    container_name: pl-ai-auth-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${AUTH_DB_USER:-plai_user}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD:-plai_password}
      POSTGRES_DB: ${AUTH_DB_NAME:-plai_db}
    expose: ["5432"]
    ports: ["5433:5432"]
    networks: [pl-ai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-plai_user} -d $${POSTGRES_DB:-plai_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # --- RIMOSSO Servizio regression_service_db ---

  image_generator_db:
    image: postgres:15-alpine
    container_name: pl-ai-image-generator-db
    volumes:
      - image_generator_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${IMAGE_GEN_DB_USER:-imagegen_user}
      POSTGRES_PASSWORD: ${IMAGE_GEN_DB_PASSWORD:-imagegen_password}
      POSTGRES_DB: ${IMAGE_GEN_DB_NAME:-imagegen_db}
    expose: ["5432"]
    networks: [pl-ai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-imagegen_user} -d $${POSTGRES_DB:-imagegen_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  resource_db:
    image: postgres:15-alpine
    container_name: pl-ai-resource-db
    volumes:
      - resource_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${RESOURCE_DB_USER:-resource_user}
      POSTGRES_PASSWORD: ${RESOURCE_DB_PASSWORD:-resource_password}
      POSTGRES_DB: ${RESOURCE_DB_NAME:-resource_db}
    expose: ["5432"]
    ports: ["5435:5432"] # Mantenuto per debug se necessario
    networks: [pl-ai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-resource_user} -d $${POSTGRES_DB:-resource_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # --- Message Broker ---
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: pl-ai-rabbitmq
    volumes: [rabbitmq_data:/var/lib/rabbitmq/]
    ports: ["15672:15672"]
    expose: ["5672"]
    networks: [pl-ai-network]
    healthcheck:
        test: ["CMD", "rabbitmq-diagnostics", "check_running", "-q"]
        interval: 30s
        timeout: 10s
        retries: 5
    restart: unless-stopped

  # --- Backend Services ---
  auth_service:
    build: { context: ./backend/auth_service }
    container_name: pl-ai-auth-service
    env_file: [./backend/auth_service/.env]
    volumes: ['./backend/auth_service:/app']
    expose: ["8000"]
    networks: [pl-ai-network]
    depends_on: { auth_db: { condition: service_healthy } }
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/admin/login/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  pl_ai_regression_service: # --- Aggiornato ---
    build: { context: ./backend/regression_service }
    container_name: pl-ai-regression-service
    env_file: [./backend/regression_service/.env]
    volumes:
      - ./backend/regression_service:/app # Solo codice
      # RIMOSSO volume media
    expose: ["8001"]
    networks: [pl-ai-network]
    # RIMOSSA dipendenza da DB
    depends_on: # Dipende da resource manager per chiamate interne
      resource_manager_service: { condition: service_started } # O healthy se ha healthcheck affidabile
    # RIMOSSO healthcheck basato su /admin (o sostituire con uno valido)
    restart: unless-stopped

  pl_ai_image_generator_service:
    build: { context: ./backend/image_generator_service }
    container_name: pl-ai-image-generator-service
    env_file: [./backend/image_generator_service/.env]
    volumes:
      - ./backend/image_generator_service:/app
      - image_generator_media:/app/mediafiles
    secrets: [openai_api_key_secret, stability_api_key_secret]
    expose: ["8002"]
    networks: [pl-ai-network]
    depends_on: { image_generator_db: { condition: service_healthy } }
    healthcheck:
       test: ["CMD-SHELL", "curl --fail http://localhost:8002/admin/login/ || exit 1"]
       interval: 30s
       timeout: 10s
       retries: 5
       start_period: 45s
    restart: unless-stopped

  resource_manager_service: # Web
    build: { context: ./backend/resource_manager_service }
    container_name: pl-ai-resource-manager-web
    env_file: [./backend/resource_manager_service/.env]
    environment: [SERVICE_PROCESS_TYPE=web]
    volumes:
      - ./backend/resource_manager_service:/app
      - resource_media_data:/app/mediafiles
    expose: ["8003"]
    networks: [pl-ai-network]
    depends_on:
      resource_db: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    healthcheck:
       test: ["CMD-SHELL", "curl --fail http://localhost:8003/admin/login/ || exit 1"]
       interval: 30s
       timeout: 10s
       retries: 5
       start_period: 45s
    restart: unless-stopped

  resource_manager_worker: # Celery
    build: { context: ./backend/resource_manager_service }
    container_name: pl-ai-resource-manager-worker
    entrypoint: ""
    command: ["celery", "-A", "service_config", "worker", "--loglevel=INFO"]
    env_file: [./backend/resource_manager_service/.env]
    volumes:
      - ./backend/resource_manager_service:/app
      - resource_media_data:/app/mediafiles
    networks: [pl-ai-network]
    depends_on:
      resource_db: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    restart: unless-stopped

  # --- Frontend Service ---
  frontend:
    build: { context: ./frontend }
    container_name: pl-ai-frontend
    expose: ["3000"]
    networks: [pl-ai-network]
    restart: unless-stopped

  # --- API Gateway / Reverse Proxy ---
  nginx:
    build: { context: ./nginx }
    container_name: pl-ai-nginx
    ports: ["8080:80"]
    networks: [pl-ai-network]
    volumes:
      # Rimosso mount regression_media_data
      - image_generator_media:/media_images:ro
      - resource_media_data:/media_resources:ro
    depends_on:
      auth_service: { condition: service_healthy }
      pl_ai_regression_service: { condition: service_started } # Aggiornato a started
      pl_ai_image_generator_service: { condition: service_healthy } # O started
      resource_manager_service: { condition: service_healthy }
      frontend: { condition: service_started }
    restart: unless-stopped