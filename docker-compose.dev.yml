# Docker Compose per sviluppo - AI PLAYGROUND GOLINELLI
# Uso: docker-compose -f docker-compose.dev.yml up -d

networks:
  ai_platform_network:
    driver: bridge
  golinelli-ai-network:
    driver: bridge

volumes:
  analysis_db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/analysis_db_data
  analysis_results_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/analysis_results_data
  chatbot_db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/chatbot_db_data
  classifier_db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/classifier_db_data
  image_generator_db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/image_generator_db_data
  image_generator_media:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/image_generator_media
  models_storage_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/models_storage_data
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/postgres_data
  rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/rabbitmq_data
  resource_db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/resource_db_data
  resource_media_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/resource_media_data
  rag_db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/rag_db_data
  rag_uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/rag_uploads_data
  rag_embeddings_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/rag_embeddings_data
  user_db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/user_db_data
  learning_db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/golinelli-ai/volumes/learning_db_data

secrets:
  anthropic_api_key_secret:
    file: ./.secrets/anthropic_api_key.txt
  gemini_api_key_secret:
    file: ./.secrets/gemini_api_key.txt
  openai_api_key_secret:
    file: ./.secrets/openai_api_key.txt
  stability_api_key_secret:
    file: ./.secrets/stability_api_key.txt

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  auth_db:
    image: postgres:15-alpine
    container_name: golinelli-ai-auth-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME}
    expose: ["5432"]
    networks: [golinelli-ai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER} -d ${AUTH_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  user_db:
    image: postgres:15-alpine
    container_name: golinelli-ai-user-db
    volumes:
      - user_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
      POSTGRES_DB: ${USER_DB_NAME}
    expose: ["5432"]
    networks: [golinelli-ai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  chatbot_db:
    image: postgres:15-alpine
    container_name: golinelli-ai-chatbot-db
    volumes:
      - chatbot_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${CHATBOT_DB_USER}
      POSTGRES_PASSWORD: ${CHATBOT_DB_PASSWORD}
      POSTGRES_DB: ${CHATBOT_DB_NAME}
    expose: ["5432"]
    networks: [golinelli-ai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CHATBOT_DB_USER} -d ${CHATBOT_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  image_generator_db:
    image: postgres:15-alpine
    container_name: golinelli-ai-image-generator-db
    volumes:
      - image_generator_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${IMAGE_GEN_DB_USER}
      POSTGRES_PASSWORD: ${IMAGE_GEN_DB_PASSWORD}
      POSTGRES_DB: ${IMAGE_GEN_DB_NAME}
    expose: ["5432"]
    networks: [golinelli-ai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${IMAGE_GEN_DB_USER} -d ${IMAGE_GEN_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  resource_db:
    image: postgres:15-alpine
    container_name: golinelli-ai-resource-db
    volumes:
      - resource_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${RESOURCE_DB_USER}
      POSTGRES_PASSWORD: ${RESOURCE_DB_PASSWORD}
      POSTGRES_DB: ${RESOURCE_DB_NAME}
    expose: ["5432"]
    networks: [golinelli-ai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${RESOURCE_DB_USER} -d ${RESOURCE_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  classifier_db:
    image: postgres:15-alpine
    container_name: golinelli-ai-classifier-db
    volumes:
      - classifier_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${CLASSIFIER_DB_USER}
      POSTGRES_PASSWORD: ${CLASSIFIER_DB_PASSWORD}
      POSTGRES_DB: ${CLASSIFIER_DB_NAME}
    expose: ["5432"]
    networks: [golinelli-ai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CLASSIFIER_DB_USER} -d ${CLASSIFIER_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  analysis_db:
    image: postgres:15-alpine
    container_name: golinelli-ai-analysis-db
    volumes:
      - analysis_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${ANALYSIS_DB_USER}
      POSTGRES_PASSWORD: ${ANALYSIS_DB_PASSWORD}
      POSTGRES_DB: ${ANALYSIS_DB_NAME}
    expose: ["5432"]
    networks: [golinelli-ai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ANALYSIS_DB_USER} -d ${ANALYSIS_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rag_db:
    image: postgres:15-alpine
    container_name: golinelli-ai-rag-db
    volumes:
      - rag_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${RAG_DB_USER}
      POSTGRES_PASSWORD: ${RAG_DB_PASSWORD}
      POSTGRES_DB: ${RAG_DB_NAME}
    expose: ["5432"]
    networks: [golinelli-ai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${RAG_DB_USER} -d ${RAG_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  learning_db:
    image: postgres:15-alpine
    container_name: golinelli-ai-learning-db
    volumes:
      - learning_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${LEARNING_DB_USER}
      POSTGRES_PASSWORD: ${LEARNING_DB_PASSWORD}
      POSTGRES_DB: ${LEARNING_DB_NAME}
    expose: ["5432"]
    networks: [golinelli-ai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${LEARNING_DB_USER} -d ${LEARNING_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # MESSAGE BROKER
  # =============================================================================
  
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: golinelli-ai-rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    expose: ["5672"]
    networks: [golinelli-ai-network]
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running", "-q"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # BACKEND SERVICES (API)
  # =============================================================================
  
  auth_service:
    build:
      context: ./backend/auth_service
    container_name: golinelli-ai-auth-service
    env_file: [./backend/auth_service/.env.dev]
    expose: ["8000"]
    networks: [golinelli-ai-network]
    depends_on:
      auth_db: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/admin/login/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  user_service:
    build:
      context: ./backend/user_service
    container_name: golinelli-ai-user-service
    env_file: [./backend/user_service/.env.dev]
    volumes:
      - /opt/golinelli-ai/volumes/user_media:/app/mediafiles
    secrets:
      - openai_api_key_secret
    expose: ["8000"]
    networks: [golinelli-ai-network]
    depends_on:
      user_db: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/admin/login/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  chatbot_service:
    build:
      context: ./backend/chatbot_service
    container_name: golinelli-ai-chatbot-service
    env_file: [./backend/chatbot_service/.env.dev]
    secrets:
      - openai_api_key_secret
      - gemini_api_key_secret
      - anthropic_api_key_secret
    expose: ["8000"]
    networks: [golinelli-ai-network]
    depends_on:
      chatbot_db: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/admin/login/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  image_generator_service:
    build:
      context: ./backend/image_generator_service
    container_name: golinelli-ai-image-generator-service
    env_file: [./backend/image_generator_service/.env.dev]
    volumes:
      - image_generator_media:/app/mediafiles
    secrets:
      - openai_api_key_secret
      - stability_api_key_secret
    expose: ["8000"]
    networks: [golinelli-ai-network]
    depends_on:
      image_generator_db: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/admin/login/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    restart: unless-stopped

  resource_manager_service:
    build:
      context: ./backend/resource_manager_service
    container_name: golinelli-ai-resource-manager-service
    env_file: [./backend/resource_manager_service/.env.dev]
    environment: [SERVICE_PROCESS_TYPE=web]
    volumes:
      - /opt/golinelli-ai/volumes/resource_media:/app/mediafiles
    expose: ["8000"]
    networks: [golinelli-ai-network]
    depends_on:
      resource_db: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/admin/login/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    restart: unless-stopped

  image_classifier_service:
    build:
      context: ./backend/image_classifier_service
    container_name: golinelli-ai-classifier-service
    env_file: [./backend/image_classifier_service/.env.dev]
    environment: [SERVICE_PROCESS_TYPE=web]
    volumes:
      - models_storage_data:/app/models_storage
    expose: ["8000"]
    networks: [golinelli-ai-network]
    depends_on:
      classifier_db: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/admin/login/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  data_analysis_service:
    build:
      context: ./backend/data_analysis_service
    container_name: golinelli-ai-data-analysis-service
    env_file: [./backend/data_analysis_service/.env.dev]
    environment: [SERVICE_PROCESS_TYPE=web]
    volumes:
      - analysis_results_data:/app/analysis_results_storage
    secrets:
      - openai_api_key_secret
    expose: ["8000"]
    networks: [golinelli-ai-network]
    depends_on:
      analysis_db: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      resource_manager_service: { condition: service_started }
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/admin/login/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  rag_service:
    build:
      context: ./backend/rag_service
    container_name: golinelli-ai-rag-service
    env_file: [./backend/rag_service/.env.dev]
    environment: [SERVICE_PROCESS_TYPE=web]
    volumes:
      - rag_uploads_data:/app/rag_uploads
      - rag_embeddings_data:/app/rag_embeddings
    secrets:
      - openai_api_key_secret
    expose: ["8000"]
    networks: [golinelli-ai-network]
    depends_on:
      rag_db: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/admin/login/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  learning_service:
    build:
      context: ./backend/learning_service
    container_name: golinelli-ai-learning-service
    env_file: [./backend/learning_service/.env.dev]
    volumes:
      - /opt/golinelli-ai/volumes/learning_media:/app/mediafiles
      - /opt/golinelli-ai/volumes/learning_logs:/app/logs
    secrets:
      - openai_api_key_secret
    expose: ["8000"]
    networks: [golinelli-ai-network]
    depends_on:
      learning_db: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/admin/login/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # =============================================================================
  # WORKER SERVICES (Background Tasks)  
  # =============================================================================
  
  rag_worker:
    build:
      context: ./backend/rag_service
    container_name: golinelli-ai-rag-worker
    env_file: [./backend/rag_service/.env.dev]
    environment: [SERVICE_PROCESS_TYPE=worker]
    volumes:
      - rag_uploads_data:/app/rag_uploads
      - rag_embeddings_data:/app/rag_embeddings
    secrets:
      - openai_api_key_secret
    networks: [golinelli-ai-network]
    depends_on:
      rag_db: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    restart: unless-stopped

  data_analysis_worker:
    build:
      context: ./backend/data_analysis_service
    container_name: golinelli-ai-data-analysis-worker
    entrypoint: ""
    command: ["celery", "-A", "service_config", "worker", "--loglevel=INFO", "-Q", "analysis_tasks", "-c", "1"]
    env_file: [./backend/data_analysis_service/.env.dev]
    volumes:
      - analysis_results_data:/app/analysis_results_storage
    secrets:
      - openai_api_key_secret
    networks: [golinelli-ai-network]
    depends_on:
      analysis_db: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      resource_manager_service: { condition: service_started }
    restart: unless-stopped

  image_classifier_worker:
    build:
      context: ./backend/image_classifier_service
    container_name: golinelli-ai-classifier-worker
    entrypoint: ""
    command: ["celery", "-A", "service_config", "worker", "--loglevel=INFO", "-Q", "classifier_tasks", "-c", "1"]
    env_file: [./backend/image_classifier_service/.env.dev]
    volumes:
      - models_storage_data:/app/models_storage
    networks: [golinelli-ai-network]
    depends_on:
      classifier_db: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    restart: unless-stopped

  resource_manager_worker:
    build:
      context: ./backend/resource_manager_service
    container_name: golinelli-ai-resource-worker
    entrypoint: ""
    command: ["celery", "-A", "service_config", "worker", "--loglevel=INFO", "-Q", "resource_tasks"]
    env_file: [./backend/resource_manager_service/.env.dev]
    volumes:
      - /opt/golinelli-ai/volumes/resource_media:/app/mediafiles
    networks: [golinelli-ai-network]
    depends_on:
      resource_db: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    restart: unless-stopped

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================
  
  frontend:
    build:
      context: ./frontend
    container_name: golinelli-ai-frontend
    expose: ["3000"]
    networks: [golinelli-ai-network]
    restart: unless-stopped

  # =============================================================================
  # API GATEWAY / REVERSE PROXY
  # =============================================================================
  
  nginx:
    build:
      context: ./nginx
    container_name: golinelli-ai-nginx
    ports: ["8081:80"]  # Porta 8081 per evitare conflitti
    networks:
      - golinelli-ai-network
      - ai_platform_network
    volumes:
      - analysis_results_data:/media_analysis_results:ro
      - image_generator_media:/media_images:ro
      - /opt/golinelli-ai/volumes/resource_media:/media_resources:ro
      - /opt/golinelli-ai/volumes/user_media:/media_users:ro
      - rag_uploads_data:/media_rag_uploads:ro
    depends_on:
      auth_service: { condition: service_healthy }
      user_service: { condition: service_healthy }
      image_generator_service: { condition: service_healthy }
      resource_manager_service: { condition: service_healthy }
      image_classifier_service: { condition: service_started }
      data_analysis_service: { condition: service_healthy }
      rag_service: { condition: service_healthy }
      learning_service: { condition: service_healthy }
      frontend: { condition: service_started }
    restart: unless-stopped 