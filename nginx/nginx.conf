user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    keepalive_timeout  65;
    client_max_body_size 150M; # Dimensione massima corpo richiesta globale

    gzip  on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript application/xml application/xml+rss text/javascript image/jpeg image/png image/svg+xml application/pdf;

    # --- Upstreams ---
    upstream auth_service_upstream                 { server auth_service:8000; }
    upstream regression_service_upstream           { server pl_ai_regression_service:8001; }
    upstream image_generator_service_upstream      { server pl_ai_image_generator_service:8002; }
    upstream resource_manager_service_upstream     { server resource_manager_service:8003; } # Web del RM
    upstream frontend_upstream                     { server frontend:3000; }
    upstream image_classifier_service_upstream     { server image_classifier_service:8004; } # Web del Classifier
    upstream data_analysis_service_upstream       { server data_analysis_service:8005; }  # NUOVO, Web del Data Analysis

    server {
        listen 80;
        server_name localhost; # O il tuo dominio

        # --- Media File Serving ---
        # Assicurati che i percorsi alias corrispondano ai target dei mount nel container Nginx
        # come definiti nel docker-compose.yml (es. /media_images, /media_resources, ecc.)

        # Image Generator Media
        location /media/temp_generated/ {
            alias /media_images/temp_generated/; # Da image_generator_media
            expires 1h; add_header Cache-Control "private, no-store"; access_log off;
        }
        location /media/saved_images/ {
             alias /media_images/saved_images/;   # Da image_generator_media
             expires 30d; add_header Cache-Control "public"; access_log off;
        }

        # Resource Manager Media
        location /media/resources/ {
            alias /media_resources/resources/; # Da resource_media_data
            expires 30d; add_header Cache-Control "public";
            try_files $uri =404; # Se il file non esiste, restituisci 404
            access_log off;
        }

        # Data Analysis Media (se salva plot come file)
        location /media/analysis_results/ {
            alias /media_analysis_results/analysis_jobs/; # Da analysis_results_data
            expires 7d; add_header Cache-Control "public"; access_log off;
        }


        # --- API Routing ---
        # Blocco comune per gli header proxy, per evitare ripetizioni
        # proxy_set_header Host $host;
        # proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
        # proxy_redirect off;

        location /api/v1/ { # Auth Service
            proxy_pass http://auth_service_upstream/api/v1/;
            proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_redirect off;
        }

        location /api/regression/ { # Regression Service
            # Assumendo che regression_service -> regression_project/urls.py abbia path('api/regression/', include('regression_api.urls'))
            # E regression_api/urls.py abbia path('run/', ...)
            # Allora Nginx inoltra /api/regression/run/ a http://.../api/regression/run/
            proxy_pass http://regression_service_upstream/api/regression/;
            proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_redirect off;
        }

        location /api/images/ { # Image Generator Service
            # Assumendo che image_generator_service -> service_config/urls.py abbia path('api/', include('generator_api.urls'))
            # E generator_api/urls.py abbia i suoi path relativi (es. 'generate/text-to-image/')
            proxy_pass http://image_generator_service_upstream/api/; # Inoltra a /api/ del backend
            proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_redirect off;
            proxy_connect_timeout 180s;
            proxy_send_timeout 180s;
            proxy_read_timeout 180s;
        }

        location /api/resources/ { # Resource Manager Service
            # Assumendo service_config/urls.py -> path('api/', include('resources_api.urls'))
            proxy_pass http://resource_manager_service_upstream/api/; # Inoltra a /api/ del backend
            proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_redirect off;
        }

        location /api/classifier/ { # Image Classifier Service
            # Assumendo service_config/urls.py -> path('api/classifier/', include('classifier_api.urls'))
            # E classifier_api/urls.py -> path('train/', ...)
            proxy_pass http://image_classifier_service_upstream/api/classifier/; # Inoltra a /api/classifier/ del backend
            proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_redirect off;
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        location /api/analysis/ { # Data Analysis Service
            # Assumendo service_config/urls.py -> path('api/analysis/', include('analysis_api.urls'))
            # E analysis_api/urls.py -> path('suggest-algorithm/', ...)
            proxy_pass http://data_analysis_service_upstream/api/analysis/; # Inoltra a /api/analysis/ del backend
            proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_redirect off;
            proxy_connect_timeout 120s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }

        # --- Frontend (React App) ---
        location / {
            proxy_pass http://frontend_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }
    }
}